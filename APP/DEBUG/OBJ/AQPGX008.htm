<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\DEBUG\OBJ\AQPGX008.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\DEBUG\OBJ\AQPGX008.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5050106: Last Updated: Tue Jul 19 17:11:28 2022
<BR><P>
<H3>Maximum Stack Usage =        176 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; FunE2_SysPro &rArr; FunE2_SysNol &rArr; Write24c02_Sub &rArr; Siic_Send &rArr; Siic_Write
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[12]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[12]">ADC1_COMP_IRQHandler</a><BR>
 <LI><a href="#[2]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[2]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC1_COMP_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[22]">CEC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[26]">Com_rx_process</a> from uart.o(i.Com_rx_process) referenced from uart.o(i.IrqMotorCom)
 <LI><a href="#[f]">DMA1_Channel1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[10]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[11]">DMA1_Channel4_5_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from suart.o(i.EXTI4_15_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from stm32f0xx_it.o(i.HardFault_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1c]">I2C1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1d]">I2C2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from stm32f0xx_it.o(i.NMI_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from stm32f0xx_it.o(i.PendSV_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1e]">SPI1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1f]">SPI2_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from stm32f0xx_it.o(i.SVC_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from sysclock.o(i.SysTick_Handler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[24]">SystemInit</a> from system_stm32f0xx.o(i.SystemInit) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[18]">TIM14_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[19]">TIM15_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1a]">TIM16_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[1b]">TIM17_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[13]">TIM1_BRK_UP_TRG_COM_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[14]">TIM1_CC_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[15]">TIM2_IRQHandler</a> from uart485.o(i.TIM2_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[16]">TIM3_IRQHandler</a> from lcd_1621.o(i.TIM3_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[17]">TIM6_DAC_IRQHandler</a> from suart.o(i.TIM6_DAC_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[e]">TS_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[20]">USART1_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[21]">USART2_IRQHandler</a> from wifi.o(i.USART2_IRQHandler) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32f030x8.o(.text) referenced from startup_stm32f030x8.o(RESET)
 <LI><a href="#[25]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32f030x8.o(.text)
 <LI><a href="#[23]">main</a> from main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[25]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[13b]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[27]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[13c]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[13d]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[13e]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[13f]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[140]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[12]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[22]"></a>CEC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>DMA1_Channel4_5_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1e]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>TIM14_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>TIM15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>TIM16_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>TIM17_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM1_BRK_UP_TRG_COM_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM1_CC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>TS_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[20]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32f030x8.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[141]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_updata
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysclock_init
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMotorCom
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunAutoUpWater
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Countdown
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunTimeCtrl
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_UnitRound
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_GateToSpeed
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_m3hToOhter
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_SpeedToGate
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSelfStudy_Set
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdError
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysNol
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinToBcd_Sub
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_average
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_GetPress
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_speed_set_handle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_flow_rate_set_handle
</UL>

<P><STRONG><a name="[142]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)

<P><STRONG><a name="[29]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyUpDownSetTime
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suKeyUp_DownSetTime
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTimeSet
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysNol
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysTest
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysNol
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysInit
</UL>

<P><STRONG><a name="[143]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[144]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[2c]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysUpPowerInit_0
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_0
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysAging
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[145]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[146]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2b]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunWriteRam_1729
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnSpeed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnGate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysUpPowerInit_1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_0
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[147]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[148]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2d]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[40]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysNol
</UL>

<P><STRONG><a name="[28]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[149]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[14a]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[14b]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[c1]"></a>ADC_ChannelConfig</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_ChannelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[c3]"></a>ADC_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[c4]"></a>ADC_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[2f]"></a>ADC_DeInit</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_DeInit
</UL>
<BR>[Calls]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphResetCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[c2]"></a>ADC_GetCalibrationFactor</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetCalibrationFactor))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[a7]"></a>ADC_GetConversionValue</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetConversionValue))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_average
</UL>

<P><STRONG><a name="[a6]"></a>ADC_GetFlagStatus</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
<LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_average
</UL>

<P><STRONG><a name="[bf]"></a>ADC_Init</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, stm32f0xx_adc.o(i.ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = ADC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[a5]"></a>ADC_StartOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StartOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_average
</UL>

<P><STRONG><a name="[a8]"></a>ADC_StopOfConversion</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StopOfConversion))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_average
</UL>

<P><STRONG><a name="[be]"></a>ADC_StructInit</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_adc.o(i.ADC_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[12d]"></a>AcVoltLmt</STRONG> (Thumb, 84 bytes, Stack size 12 bytes, mode.o(i.AcVoltLmt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = AcVoltLmt
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[92]"></a>BcdToBin_Sub</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, rtc.o(i.BcdToBin_Sub))
<BR><BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysNol
</UL>

<P><STRONG><a name="[31]"></a>BinToBcd_Sub</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, rtc.o(i.BinToBcd_Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BinToBcd_Sub &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysNol
</UL>

<P><STRONG><a name="[82]"></a>CRC_SwCalCRC16</STRONG> (Thumb, 42 bytes, Stack size 12 bytes, uart.o(i.CRC_SwCalCRC16))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = CRC_SwCalCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMonitorCom
</UL>

<P><STRONG><a name="[26]"></a>Com_rx_process</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, uart.o(i.Com_rx_process))
<BR>[Address Reference Count : 1]<UL><LI> uart.o(i.IrqMotorCom)
</UL>
<P><STRONG><a name="[d7]"></a>DCR_Data_func</STRONG> (Thumb, 134 bytes, Stack size 16 bytes, lcd_1621.o(i.DCR_Data_func))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DCR_Data_func
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToHt1621_Sub
</UL>

<P><STRONG><a name="[32]"></a>DispToItemLo</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lcdfunc.o(i.DispToItemLo))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartMin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartHour
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispNowMin
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispNowHour
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndMin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndHour
</UL>

<P><STRONG><a name="[33]"></a>DispTranBit_ForCam</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lcd_1621.o(i.DispTranBit_ForCam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = DispTranBit_ForCam
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToHt1621_Sub
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD1621_SelfSetInit
</UL>

<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, suart.o(i.EXTI4_15_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = EXTI4_15_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_GetITStatus
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[36]"></a>EXTI_GetITStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, stm32f0xx_exti.o(i.EXTI_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI4_15_IRQHandler
</UL>

<P><STRONG><a name="[f4]"></a>EXTI_Init</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, stm32f0xx_exti.o(i.EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
</UL>

<P><STRONG><a name="[118]"></a>FunAnalogCtrl</STRONG> (Thumb, 124 bytes, Stack size 8 bytes, adc.o(i.FunAnalogCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunAnalogCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[37]"></a>FunAnalog_CycleGet</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, adc.o(i.FunAnalog_CycleGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FunAnalog_CycleGet &rArr; Get_average &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_average
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Countdown
</UL>

<P><STRONG><a name="[39]"></a>FunAutoUpWater</STRONG> (Thumb, 390 bytes, Stack size 24 bytes, adc.o(i.FunAutoUpWater))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FunAutoUpWater &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeToUpWash
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[42]"></a>FunE2_SysPro</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, e2prom.o(i.FunE2_SysPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = FunE2_SysPro &rArr; FunE2_SysNol &rArr; Write24c02_Sub &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysTest
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysNol
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>FunErrorRemeber</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, errorfunc.o(i.FunErrorRemeber))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FunErrorRemeber
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[98]"></a>FunForVersionToSet</STRONG> (Thumb, 418 bytes, Stack size 16 bytes, ic74hc165.o(i.FunForVersionToSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FunForVersionToSet
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProInit
</UL>

<P><STRONG><a name="[44]"></a>FunInOut</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, key.o(i.FunInOut))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FunInOut &rArr; subKeyScan
</UL>
<BR>[Calls]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyScan
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDinScan
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subBuzz
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[134]"></a>FunKeyLockLight</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lcd.o(i.FunKeyLockLight))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[48]"></a>FunLcdError</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lcd.o(i.FunLcdError))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FunLcdError &rArr; subDispTripFlash &rArr; subDispRpm &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispTripFlash
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispTrip
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTestMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[4b]"></a>FunLcdModeGate</STRONG> (Thumb, 102 bytes, Stack size 24 bytes, lcd.o(i.FunLcdModeGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunLcdModeGate &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[4e]"></a>FunLcdModeShutDown</STRONG> (Thumb, 352 bytes, Stack size 24 bytes, lcd.o(i.FunLcdModeShutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunLcdModeShutDown &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[4f]"></a>FunLcdModeSpeed</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, lcd.o(i.FunLcdModeSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunLcdModeSpeed &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
</UL>
<BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[50]"></a>FunLcdModeTime_Invalid</STRONG> (Thumb, 60 bytes, Stack size 16 bytes, lcd.o(i.FunLcdModeTime_Invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FunLcdModeTime_Invalid &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[51]"></a>FunLcdModeTime_Run</STRONG> (Thumb, 400 bytes, Stack size 24 bytes, lcd.o(i.FunLcdModeTime_Run))
<BR><BR>[Stack]<UL><LI>Max Depth = 100<LI>Call Chain = FunLcdModeTime_Run &rArr; FunLcdModeSpeed &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartMin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartHour
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndMin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndHour
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeSpeed
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeGate
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[56]"></a>FunLcdModeTime_Set</STRONG> (Thumb, 490 bytes, Stack size 24 bytes, lcd.o(i.FunLcdModeTime_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunLcdModeTime_Set &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispUnit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartMin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartHour
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
<LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispNowMin
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispNowHour
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndMin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndHour
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[5a]"></a>FunLcdModeTime_Stay</STRONG> (Thumb, 240 bytes, Stack size 24 bytes, lcd.o(i.FunLcdModeTime_Stay))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunLcdModeTime_Stay &rArr; subDispRpm &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispUnit
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartMin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartHour
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndMin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndHour
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[5b]"></a>FunLcdModeWash</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, lcd.o(i.FunLcdModeWash))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FunLcdModeWash &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[133]"></a>FunLcdOther</STRONG> (Thumb, 110 bytes, Stack size 0 bytes, lcd.o(i.FunLcdOther))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[5c]"></a>FunLcdOutCtrl</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lcd.o(i.FunLcdOutCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FunLcdOutCtrl &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[5d]"></a>FunLcdSysAging</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, lcd.o(i.FunLcdSysAging))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunLcdSysAging
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProRun
</UL>

<P><STRONG><a name="[5e]"></a>FunLcdSysTest_0</STRONG> (Thumb, 208 bytes, Stack size 8 bytes, lcd.o(i.FunLcdSysTest_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = FunLcdSysTest_0 &rArr; mcu_start_wifitest &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_start_wifitest
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTestMode
</UL>

<P><STRONG><a name="[60]"></a>FunLcdSysTest_1</STRONG> (Thumb, 514 bytes, Stack size 16 bytes, lcd.o(i.FunLcdSysTest_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = FunLcdSysTest_1 &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartMin
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispStartHour
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndMin
<LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispEndHour
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTestMode
</UL>

<P><STRONG><a name="[61]"></a>FunLcdSysUpPowerInit_0</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lcd.o(i.FunLcdSysUpPowerInit_0))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunLcdSysUpPowerInit_0
</UL>
<BR>[Calls]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProInit
</UL>

<P><STRONG><a name="[62]"></a>FunLcdSysUpPowerInit_1</STRONG> (Thumb, 284 bytes, Stack size 8 bytes, lcd.o(i.FunLcdSysUpPowerInit_1))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = FunLcdSysUpPowerInit_1 &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProInit
</UL>

<P><STRONG><a name="[63]"></a>FunLcdWarnGate</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, lcd.o(i.FunLcdWarnGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunLcdWarnGate &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_SpeedToGate
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[65]"></a>FunLcdWarnSpeed</STRONG> (Thumb, 274 bytes, Stack size 24 bytes, lcd.o(i.FunLcdWarnSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunLcdWarnSpeed &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispWt
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_SpeedToPercent
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[9d]"></a>FunLcdbrightness</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, lcd.o(i.FunLcdbrightness))
<BR><BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProRun
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[67]"></a>FunMcuInit</STRONG> (Thumb, 90 bytes, Stack size 8 bytes, init.o(i.FunMcuInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = FunMcuInit &rArr; pro_wifiuart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_protocol_init
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuLCDInit
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuUartInit
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuTimeInit
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuRamInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGPIOInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[3e]"></a>FunModeGateLimit</STRONG> (Thumb, 98 bytes, Stack size 8 bytes, modefunc.o(i.FunModeGateLimit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunModeGateLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyUpDownSetTime
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_SpeedToGate
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTime_UnitSwitch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_UnitSwitch
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateUpDown
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysInit
</UL>

<P><STRONG><a name="[71]"></a>FunModeGateUpDown</STRONG> (Thumb, 98 bytes, Stack size 16 bytes, modefunc.o(i.FunModeGateUpDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FunModeGateUpDown &rArr; FunModeGateLimit
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[7f]"></a>FunModeGate_StudyMax</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, modefunc.o(i.FunModeGate_StudyMax))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_GateToSpeed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_SpeedToGate
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[72]"></a>FunModeGate_UnitSwitch</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, modefunc.o(i.FunModeGate_UnitSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FunModeGate_UnitSwitch &rArr; FunMode_UnitRound &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_UnitRound
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_GateToSpeed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_SpeedToGate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[75]"></a>FunModeGate_m3hToOhter</STRONG> (Thumb, 146 bytes, Stack size 8 bytes, modefunc.o(i.FunModeGate_m3hToOhter))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FunModeGate_m3hToOhter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSelfStudy_Set
</UL>

<P><STRONG><a name="[12b]"></a>FunModeOutCtrl_485</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, modefunc.o(i.FunModeOutCtrl_485))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunModeOutCtrl_485
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[12a]"></a>FunModeOutCtrl_Analog</STRONG> (Thumb, 184 bytes, Stack size 0 bytes, modefunc.o(i.FunModeOutCtrl_Analog))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[129]"></a>FunModeOutCtrl_Din</STRONG> (Thumb, 158 bytes, Stack size 4 bytes, modefunc.o(i.FunModeOutCtrl_Din))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FunModeOutCtrl_Din
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[135]"></a>FunModeRemeber</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modefunc.o(i.FunModeRemeber))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[76]"></a>FunModeShutDown</STRONG> (Thumb, 290 bytes, Stack size 24 bytes, modefunc.o(i.FunModeShutDown))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FunModeShutDown &rArr; sub1stRam
</UL>
<BR>[Calls]<UL><LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetRomUpDown
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sub1stRam
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subModeSDClearTime
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[7a]"></a>FunModeTimeSet</STRONG> (Thumb, 522 bytes, Stack size 24 bytes, mode.o(i.FunModeTimeSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = FunModeTimeSet &rArr; subKeyUpDownSetTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyUpDownSetTime
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suKeyUp_DownSetTime
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subBuzCtrl
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[7e]"></a>FunModeTime_UnitSwitch</STRONG> (Thumb, 166 bytes, Stack size 24 bytes, modefunc.o(i.FunModeTime_UnitSwitch))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FunModeTime_UnitSwitch &rArr; FunMode_UnitRound &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_UnitRound
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_GateToSpeed
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMode_SpeedToGate
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateLimit
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[12e]"></a>FunModeToNormalWash</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, modefunc.o(i.FunModeToNormalWash))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[8d]"></a>FunModeToSelfStudy</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, modefunc.o(i.FunModeToSelfStudy))
<BR><BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSuperWash_Set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunReEnterSelfStudy
</UL>

<P><STRONG><a name="[12f]"></a>FunModeToSuperWash</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, modefunc.o(i.FunModeToSuperWash))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[3a]"></a>FunModeToUpWash</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, modefunc.o(i.FunModeToUpWash))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunAutoUpWater
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subMotorTrip
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[73]"></a>FunMode_GateToSpeed</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, modefunc.o(i.FunMode_GateToSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FunMode_GateToSpeed &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_StudyMax
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTime_UnitSwitch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_UnitSwitch
</UL>

<P><STRONG><a name="[64]"></a>FunMode_SpeedToGate</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, modefunc.o(i.FunMode_SpeedToGate))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FunMode_SpeedToGate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_StudyMax
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateLimit
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTime_UnitSwitch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_UnitSwitch
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnGate
</UL>

<P><STRONG><a name="[66]"></a>FunMode_SpeedToPercent</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, modefunc.o(i.FunMode_SpeedToPercent))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunMode_SpeedToPercent
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnSpeed
</UL>

<P><STRONG><a name="[74]"></a>FunMode_UnitRound</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, modefunc.o(i.FunMode_UnitRound))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FunMode_UnitRound &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTime_UnitSwitch
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_UnitSwitch
</UL>

<P><STRONG><a name="[80]"></a>FunMonitorCom</STRONG> (Thumb, 812 bytes, Stack size 24 bytes, uart.o(i.FunMonitorCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = FunMonitorCom &rArr; Uart485_correction &rArr; uart485_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_correction
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CRC_SwCalCRC16
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[83]"></a>FunMotorCom</STRONG> (Thumb, 516 bytes, Stack size 24 bytes, uart.o(i.FunMotorCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FunMotorCom &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MotorComCheckSum
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>FunNormalWash_Set</STRONG> (Thumb, 196 bytes, Stack size 8 bytes, modefunc.o(i.FunNormalWash_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunNormalWash_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[85]"></a>FunPSensor_CycleGet</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, adc.o(i.FunPSensor_CycleGet))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FunPSensor_CycleGet &rArr; Get_average &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_average
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[8a]"></a>FunPSonser</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, adc.o(i.FunPSonser))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = FunPSonser &rArr; FunPSensor_GetPress &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_IsError
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_GetPress
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_GetAD
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[8c]"></a>FunReEnterSelfStudy</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, modefunc.o(i.FunReEnterSelfStudy))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FunReEnterSelfStudy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeToSelfStudy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[93]"></a>FunRtc_SysPro</STRONG> (Thumb, 46 bytes, Stack size 8 bytes, rtc.o(i.FunRtc_SysPro))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = FunRtc_SysPro &rArr; FunRtc_SysTest &rArr; subWrite8563 &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysTest
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysNol
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysInit
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[95]"></a>FunSelfStudy_Set</STRONG> (Thumb, 422 bytes, Stack size 24 bytes, modefunc.o(i.FunSelfStudy_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = FunSelfStudy_Set &rArr; FunModeGate_m3hToOhter &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_m3hToOhter
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[96]"></a>FunSuperWash_Set</STRONG> (Thumb, 142 bytes, Stack size 8 bytes, modefunc.o(i.FunSuperWash_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = FunSuperWash_Set
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeToSelfStudy
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[97]"></a>FunSysProInit</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, mode.o(i.FunSysProInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = FunSysProInit &rArr; FunLcdSysUpPowerInit_1 &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subClrKeyBit
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subBuzCtrl
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysUpPowerInit_1
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysUpPowerInit_0
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunForVersionToSet
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[9a]"></a>FunSysProRun</STRONG> (Thumb, 96 bytes, Stack size 8 bytes, mode.o(i.FunSysProRun))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = FunSysProRun &rArr; subSetMode &rArr; FunLcdModeTime_Run &rArr; FunLcdModeSpeed &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subMotorTrip
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdbrightness
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysAging
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTestMode
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSpdToMotor
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a1]"></a>FunSysPropetyTime</STRONG> (Thumb, 108 bytes, Stack size 4 bytes, main.o(i.FunSysPropetyTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FunSysPropetyTime
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunTimeCtrl
</UL>

<P><STRONG><a name="[128]"></a>FunUpWash_Set</STRONG> (Thumb, 132 bytes, Stack size 16 bytes, modefunc.o(i.FunUpWash_Set))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = FunUpWash_Set
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[a2]"></a>FunWriteRam_1729</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lcd.o(i.FunWriteRam_1729))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = FunWriteRam_1729 &rArr; SendDataToHt1621_Sub &rArr; DispTranBit_ForCam
</UL>
<BR>[Calls]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToHt1621_Sub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC74HC595_Write
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ba]"></a>GPIO_Init</STRONG> (Thumb, 114 bytes, Stack size 16 bytes, stm32f0xx_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGPIOInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_ConfigInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD1621_GpioInit
</UL>

<P><STRONG><a name="[c6]"></a>GPIO_PinAFConfig</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, stm32f0xx_gpio.o(i.GPIO_PinAFConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = GPIO_PinAFConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGPIOInit
</UL>

<P><STRONG><a name="[da]"></a>GPIO_ReadInputDataBit</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ReadInputDataBit))
<BR><BR>[Called By]<UL><LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Wait_Ack
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Read
</UL>

<P><STRONG><a name="[88]"></a>GPIO_ResetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGPIOInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMonitorCom
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_IsError
</UL>

<P><STRONG><a name="[89]"></a>GPIO_SetBits</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGPIOInit
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_read
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMonitorCom
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_IsError
</UL>

<P><STRONG><a name="[c5]"></a>GPIO_StructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGPIOInit
</UL>

<P><STRONG><a name="[34]"></a>GPIO_WriteBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToHt1621_Sub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC74HC595_Write
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_SetPWM
<LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD1621_SelfSetInit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTranBit_ForCam
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Wait_Ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Stop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Read
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Ack
</UL>

<P><STRONG><a name="[38]"></a>Get_average</STRONG> (Thumb, 68 bytes, Stack size 24 bytes, adc.o(i.Get_average))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Get_average &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StopOfConversion
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartOfConversion
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetConversionValue
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunAnalog_CycleGet
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_CycleGet
</UL>

<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[a9]"></a>IC74HC595_En</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, ic74hc595.o(i.IC74HC595_En))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IC74HC595_En &rArr; TIM3_SetPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_SetPWM
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a3]"></a>IC74HC595_Write</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, ic74hc595.o(i.IC74HC595_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = IC74HC595_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunWriteRam_1729
</UL>

<P><STRONG><a name="[ac]"></a>IWDG_Config</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, wdog.o(i.IWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = IWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_WriteAccessCmd
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetReload
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_SetPrescaler
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b1]"></a>IWDG_Enable</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdog.o(i.IWDG_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[b0]"></a>IWDG_ReloadCounter</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, wdog.o(i.IWDG_ReloadCounter))
<BR><BR>[Called By]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Config
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[ae]"></a>IWDG_SetPrescaler</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wdog.o(i.IWDG_SetPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[af]"></a>IWDG_SetReload</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wdog.o(i.IWDG_SetReload))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[ad]"></a>IWDG_WriteAccessCmd</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, wdog.o(i.IWDG_WriteAccessCmd))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
</UL>

<P><STRONG><a name="[b2]"></a>IrqMonitorCom</STRONG> (Thumb, 94 bytes, Stack size 16 bytes, uart.o(i.IrqMonitorCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = IrqMonitorCom &rArr; Uart485_send &rArr; uart485_tx &rArr; uart485_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_sendok
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_send
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[b5]"></a>IrqMotorCom</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, uart.o(i.IrqMotorCom))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = IrqMotorCom &rArr; suart1_send &rArr; suart1_tx &rArr; suart1_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_send
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_TxState
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_SetRxProcess
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b9]"></a>LCD1621_GpioInit</STRONG> (Thumb, 30 bytes, Stack size 16 bytes, lcd_1621.o(i.LCD1621_GpioInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LCD1621_GpioInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuLCDInit
</UL>

<P><STRONG><a name="[bb]"></a>LCD1621_SelfSetInit</STRONG> (Thumb, 82 bytes, Stack size 8 bytes, lcd_1621.o(i.LCD1621_SelfSetInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = LCD1621_SelfSetInit &rArr; DispTranBit_ForCam
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTranBit_ForCam
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuLCDInit
</UL>

<P><STRONG><a name="[6d]"></a>McuAdcInit</STRONG> (Thumb, 176 bytes, Stack size 56 bytes, adc.o(i.McuAdcInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = McuAdcInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StructInit
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Init
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetFlagStatus
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetCalibrationFactor
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Cmd
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ClearFlag
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_ChannelConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_ADCCLKConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[6e]"></a>McuLCDInit</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lcd_1621.o(i.McuLCDInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = McuLCDInit &rArr; TIM3_ConfigInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_ConfigInit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD1621_SelfSetInit
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LCD1621_GpioInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[ea]"></a>NVIC_Init</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, stm32f0xx_misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_ConfigInit
</UL>

<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c0]"></a>RCC_ADCCLKConfig</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_ADCCLKConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
</UL>

<P><STRONG><a name="[bc]"></a>RCC_AHBPeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_AHBPeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuGPIOInit
</UL>

<P><STRONG><a name="[c8]"></a>RCC_APB1PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB1PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_ConfigInit
</UL>

<P><STRONG><a name="[bd]"></a>RCC_APB2PeriphClockCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuAdcInit
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[30]"></a>RCC_APB2PeriphResetCmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, stm32f0xx_rcc.o(i.RCC_APB2PeriphResetCmd))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_DeInit
</UL>

<P><STRONG><a name="[d5]"></a>RCC_GetClocksFreq</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, stm32f0xx_rcc.o(i.RCC_GetClocksFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
</UL>

<P><STRONG><a name="[3c]"></a>Read24c02_Sub</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, e2prom.o(i.Read24c02_Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Read24c02_Sub &rArr; Siic_Recv &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysTest
<LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysInit
</UL>

<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, stm32f0xx_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[f3]"></a>SYSCFG_EXTILineConfig</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, stm32f0xx_syscfg.o(i.SYSCFG_EXTILineConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SYSCFG_EXTILineConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
</UL>

<P><STRONG><a name="[a4]"></a>SendDataToHt1621_Sub</STRONG> (Thumb, 430 bytes, Stack size 32 bytes, lcd_1621.o(i.SendDataToHt1621_Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = SendDataToHt1621_Sub &rArr; DispTranBit_ForCam
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTranBit_ForCam
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DCR_Data_func
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunWriteRam_1729
</UL>

<P><STRONG><a name="[d6]"></a>Siic_Recv</STRONG> (Thumb, 172 bytes, Stack size 40 bytes, siic.o(i.Siic_Recv))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Siic_Recv &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Wait_Ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Stop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Read
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Ack
</UL>
<BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read24c02_Sub
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subRead8563
</UL>

<P><STRONG><a name="[df]"></a>Siic_Send</STRONG> (Thumb, 134 bytes, Stack size 40 bytes, siic.o(i.Siic_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Wait_Ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Stop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write24c02_Sub
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWrite8563
</UL>

<P><STRONG><a name="[12c]"></a>SpmTempProtect</STRONG> (Thumb, 282 bytes, Stack size 16 bytes, mode.o(i.SpmTempProtect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = SpmTempProtect
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, sysclock.o(i.SysTick_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = SysTick_Handler &rArr; sys_Countdown &rArr; FunAnalog_CycleGet &rArr; Get_average &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Countdown
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Handler
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMonitorCom
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSensor_CycleGet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e2]"></a>Sysclock_init</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, sysclock.o(i.Sysclock_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Sysclock_init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[24]"></a>SystemInit</STRONG> (Thumb, 84 bytes, Stack size 8 bytes, system_stm32f0xx.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = SystemInit &rArr; SetSysClock
</UL>
<BR>[Calls]<UL><LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SetSysClock
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(.text)
</UL>
<P><STRONG><a name="[15]"></a>TIM2_IRQHandler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart485.o(i.TIM2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM2_IRQHandler &rArr; uart485_rx &rArr; uart485_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_tx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx_onoff
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[c7]"></a>TIM3_ConfigInit</STRONG> (Thumb, 106 bytes, Stack size 40 bytes, lcd_1621.o(i.TIM3_ConfigInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = TIM3_ConfigInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuLCDInit
</UL>

<P><STRONG><a name="[16]"></a>TIM3_IRQHandler</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lcd_1621.o(i.TIM3_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = TIM3_IRQHandler
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[ab]"></a>TIM3_SetPWM</STRONG> (Thumb, 88 bytes, Stack size 8 bytes, lcd_1621.o(i.TIM3_SetPWM))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = TIM3_SetPWM
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC74HC595_En
</UL>

<P><STRONG><a name="[17]"></a>TIM6_DAC_IRQHandler</STRONG> (Thumb, 48 bytes, Stack size 8 bytes, suart.o(i.TIM6_DAC_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = TIM6_DAC_IRQHandler &rArr; suart1_rx &rArr; suart1_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_GetITStatus
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ClearITPendingBit
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_tx
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_rx
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e5]"></a>TIM_ClearITPendingBit</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[cf]"></a>TIM_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[ce]"></a>TIM_CtrlPWMOutputs</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_CtrlPWMOutputs))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[e4]"></a>TIM_GetITStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_GetITStatus))
<BR><BR>[Called By]<UL><LI><a href="#[16]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_IRQHandler
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[e9]"></a>TIM_ITConfig</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_ITConfig))
<BR><BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_ConfigInit
</UL>

<P><STRONG><a name="[d0]"></a>TIM_OC1Init</STRONG> (Thumb, 110 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_OC1Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC1Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[d2]"></a>TIM_OC1PreloadConfig</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC1PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[cc]"></a>TIM_OC2Init</STRONG> (Thumb, 130 bytes, Stack size 12 bytes, stm32f0xx_tim.o(i.TIM_OC2Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = TIM_OC2Init
</UL>
<BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[cd]"></a>TIM_OC2PreloadConfig</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OC2PreloadConfig))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[cb]"></a>TIM_OCStructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_OCStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[d1]"></a>TIM_SetCompare1</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCompare1))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subBuzz
</UL>

<P><STRONG><a name="[aa]"></a>TIM_SetCompare2</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_SetCompare2))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC74HC595_En
</UL>

<P><STRONG><a name="[ca]"></a>TIM_TimeBaseInit</STRONG> (Thumb, 90 bytes, Stack size 4 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = TIM_TimeBaseInit
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM3_ConfigInit
</UL>

<P><STRONG><a name="[c9]"></a>TIM_TimeBaseStructInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, stm32f0xx_tim.o(i.TIM_TimeBaseStructInit))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuPPGInit
</UL>

<P><STRONG><a name="[21]"></a>USART2_IRQHandler</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, wifi.o(i.USART2_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = USART2_IRQHandler &rArr; USART_GetITStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ReceiveData
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetITStatus
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart_receive_input
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32f030x8.o(RESET)
</UL>
<P><STRONG><a name="[e1]"></a>USART485_Handler</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, uart.o(i.USART485_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART485_Handler
</UL>
<BR>[Calls]<UL><LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_recv
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_handler
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[f7]"></a>USART_ClearFlag</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ClearFlag))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_U2_SendData
</UL>

<P><STRONG><a name="[11e]"></a>USART_Cmd</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
</UL>

<P><STRONG><a name="[f6]"></a>USART_GetFlagStatus</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_U2_SendData
</UL>

<P><STRONG><a name="[ed]"></a>USART_GetITStatus</STRONG> (Thumb, 62 bytes, Stack size 8 bytes, stm32f0xx_usart.o(i.USART_GetITStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = USART_GetITStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[11d]"></a>USART_ITConfig</STRONG> (Thumb, 50 bytes, Stack size 4 bytes, stm32f0xx_usart.o(i.USART_ITConfig))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = USART_ITConfig
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
</UL>

<P><STRONG><a name="[f2]"></a>USART_Init</STRONG> (Thumb, 136 bytes, Stack size 40 bytes, stm32f0xx_usart.o(i.USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetClocksFreq
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifiuart_init
</UL>

<P><STRONG><a name="[ee]"></a>USART_ReceiveData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[f8]"></a>USART_SendData</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, stm32f0xx_usart.o(i.USART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_U2_SendData
</UL>

<P><STRONG><a name="[81]"></a>Uart485_correction</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, uart485.o(i.Uart485_correction))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Uart485_correction &rArr; uart485_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMonitorCom
</UL>

<P><STRONG><a name="[f0]"></a>Uart485_handler</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, uart485.o(i.Uart485_handler))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Handler
</UL>

<P><STRONG><a name="[d4]"></a>Uart485_init</STRONG> (Thumb, 208 bytes, Stack size 64 bytes, uart485.o(i.Uart485_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = Uart485_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuUartInit
</UL>

<P><STRONG><a name="[f1]"></a>Uart485_recv</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, uart485.o(i.Uart485_recv))
<BR><BR>[Called By]<UL><LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART485_Handler
</UL>

<P><STRONG><a name="[b4]"></a>Uart485_send</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, uart485.o(i.Uart485_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = Uart485_send &rArr; uart485_tx &rArr; uart485_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_tx
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMonitorCom
</UL>

<P><STRONG><a name="[b3]"></a>Uart485_sendok</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, uart485.o(i.Uart485_sendok))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMonitorCom
</UL>

<P><STRONG><a name="[f5]"></a>WIFI_U2_SendData</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, wifi.o(i.WIFI_U2_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIFI_U2_SendData
</UL>
<BR>[Calls]<UL><LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_SendData
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_GetFlagStatus
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[112]"></a>WIFI_U2_cycleInit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, wifi.o(i.WIFI_U2_cycleInit))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13a]"></a>WIFI_U2_saveData</STRONG> (Thumb, 120 bytes, Stack size 16 bytes, wifi.o(i.WIFI_U2_saveData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = WIFI_U2_saveData
</UL>
<BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[f9]"></a>WWDG_Config</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, wdog.o(i.WWDG_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = WWDG_Config
</UL>
<BR>[Calls]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_ReloadCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[41]"></a>Write24c02_Sub</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, e2prom.o(i.Write24c02_Sub))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = Write24c02_Sub &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysTest
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysNol
</UL>

<P><STRONG><a name="[14c]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[14d]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[14e]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[100]"></a>all_data_update</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, protocol.o(i.all_data_update))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[11a]"></a>byte_to_int</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mcu_api.o(i.byte_to_int))
<BR><BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
</UL>

<P><STRONG><a name="[fa]"></a>data_handle</STRONG> (Thumb, 158 bytes, Stack size 24 bytes, system.o(i.data_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_test_result
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;all_data_update
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[35]"></a>delay_us</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, sysdelay.o(i.delay_us))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SendDataToHt1621_Sub
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC74HC595_Write
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispTranBit_ForCam
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Write
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Wait_Ack
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Stop
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Start
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Read
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Ack
</UL>

<P><STRONG><a name="[103]"></a>dp_download_handle</STRONG> (Thumb, 92 bytes, Stack size 8 bytes, protocol.o(i.dp_download_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = dp_download_handle &rArr; dp_download_mode_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_uint_switch_handle
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_swtich_handle
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_speed_set_handle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_flow_rate_set_handle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_backwash_time_set_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[139]"></a>get_check_sum</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, system.o(i.get_check_sum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = get_check_sum
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>

<P><STRONG><a name="[110]"></a>get_download_cmd_total</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, protocol.o(i.get_download_cmd_total))
<BR><BR>[Called By]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
</UL>

<P><STRONG><a name="[23]"></a>main</STRONG> (Thumb, 194 bytes, Stack size 0 bytes, main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 176<LI>Call Chain = main &rArr; FunE2_SysPro &rArr; FunE2_SysNol &rArr; Write24c02_Sub &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;switch_read
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_updata
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_handle
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_all_updata
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WWDG_Config
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_U2_cycleInit
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_U2_SendData
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Sysclock_init
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMotorCom
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IWDG_Config
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IC74HC595_En
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunWriteRam_1729
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProRun
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProInit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysPro
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSonser
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMotorCom
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMonitorCom
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunInOut
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysPro
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunAutoUpWater
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunAnalogCtrl
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[10f]"></a>mcu_dp_bool_update</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_bool_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_updata
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_all_updata
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_swtich_handle
</UL>

<P><STRONG><a name="[10d]"></a>mcu_dp_enum_update</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_enum_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_updata
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_all_updata
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_uint_switch_handle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[119]"></a>mcu_dp_fault_update</STRONG> (Thumb, 130 bytes, Stack size 16 bytes, mcu_api.o(i.mcu_dp_fault_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_updata
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_all_updata
</UL>

<P><STRONG><a name="[106]"></a>mcu_dp_value_update</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_dp_value_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_updata
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_all_updata
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_speed_set_handle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_flow_rate_set_handle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_backwash_time_set_handle
</UL>

<P><STRONG><a name="[10e]"></a>mcu_get_dp_download_bool</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_bool))
<BR><BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_swtich_handle
</UL>

<P><STRONG><a name="[10c]"></a>mcu_get_dp_download_enum</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_dp_download_enum))
<BR><BR>[Called By]<UL><LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_uint_switch_handle
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_mode_handle
</UL>

<P><STRONG><a name="[105]"></a>mcu_get_dp_download_value</STRONG> (Thumb, 8 bytes, Stack size 4 bytes, mcu_api.o(i.mcu_get_dp_download_value))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = mcu_get_dp_download_value
</UL>
<BR>[Calls]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;byte_to_int
</UL>
<BR>[Called By]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_speed_set_handle
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_flow_rate_set_handle
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_backwash_time_set_handle
</UL>

<P><STRONG><a name="[11c]"></a>mcu_get_wifi_work_state</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, mcu_api.o(i.mcu_get_wifi_work_state))
<BR><BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_handle
</UL>

<P><STRONG><a name="[11b]"></a>mcu_set_wifi_mode</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_set_wifi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_handle
</UL>

<P><STRONG><a name="[5f]"></a>mcu_start_wifitest</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, mcu_api.o(i.mcu_start_wifitest))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = mcu_start_wifitest &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_0
</UL>

<P><STRONG><a name="[121]"></a>my_memcpy</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, mcu_api.o(i.my_memcpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
</UL>

<P><STRONG><a name="[11f]"></a>my_strlen</STRONG> (Thumb, 32 bytes, Stack size 0 bytes, mcu_api.o(i.my_strlen))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[116]"></a>pro_all_updata</STRONG> (Thumb, 336 bytes, Stack size 8 bytes, wifi.o(i.pro_all_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = pro_all_updata &rArr; mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[114]"></a>pro_wifi_handle</STRONG> (Thumb, 154 bytes, Stack size 24 bytes, wifi.o(i.pro_wifi_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = pro_wifi_handle &rArr; mcu_set_wifi_mode &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_wifi_work_state
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[115]"></a>pro_wifi_updata</STRONG> (Thumb, 1648 bytes, Stack size 24 bytes, wifi.o(i.pro_wifi_updata))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = pro_wifi_updata &rArr; mcu_dp_fault_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subBuzCtrl
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[6f]"></a>pro_wifiuart_init</STRONG> (Thumb, 150 bytes, Stack size 64 bytes, init.o(i.pro_wifiuart_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = pro_wifiuart_init &rArr; USART_Init &rArr; RCC_GetClocksFreq &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Init
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ITConfig
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART_ClearFlag
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[120]"></a>set_wifi_uart_buffer</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, system.o(i.set_wifi_uart_buffer))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = set_wifi_uart_buffer &rArr; my_memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
</UL>

<P><STRONG><a name="[111]"></a>set_wifi_uart_byte</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, system.o(i.set_wifi_uart_byte))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[b7]"></a>suart1_SetRxProcess</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, suart.o(i.suart1_SetRxProcess))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMotorCom
</UL>

<P><STRONG><a name="[b6]"></a>suart1_TxState</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, suart.o(i.suart1_TxState))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMotorCom
</UL>

<P><STRONG><a name="[d3]"></a>suart1_init</STRONG> (Thumb, 184 bytes, Stack size 64 bytes, suart.o(i.suart1_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 80<LI>Call Chain = suart1_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_ITConfig
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SYSCFG_EXTILineConfig
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_listen
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;McuUartInit
</UL>

<P><STRONG><a name="[122]"></a>suart1_listen</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, suart.o(i.suart1_listen))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = suart1_listen &rArr; suart1_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
</UL>

<P><STRONG><a name="[eb]"></a>suart1_rx</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, suart.o(i.suart1_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = suart1_rx &rArr; suart1_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
</UL>

<P><STRONG><a name="[123]"></a>suart1_rx_onoff</STRONG> (Thumb, 74 bytes, Stack size 8 bytes, suart.o(i.suart1_rx_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = suart1_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_tx
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_rx
<LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_listen
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_send
</UL>

<P><STRONG><a name="[b8]"></a>suart1_send</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, suart.o(i.suart1_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = suart1_send &rArr; suart1_tx &rArr; suart1_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_tx
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IrqMotorCom
</UL>

<P><STRONG><a name="[ec]"></a>suart1_tx</STRONG> (Thumb, 180 bytes, Stack size 20 bytes, suart.o(i.suart1_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = suart1_tx &rArr; suart1_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[17]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM6_DAC_IRQHandler
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_send
</UL>

<P><STRONG><a name="[78]"></a>sub1stRam</STRONG> (Thumb, 284 bytes, Stack size 16 bytes, modefunc.o(i.sub1stRam))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = sub1stRam
</UL>
<BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeShutDown
</UL>

<P><STRONG><a name="[7d]"></a>subBuzCtrl</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, key.o(i.subBuzCtrl))
<BR><BR>[Called By]<UL><LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pro_wifi_updata
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProInit
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyScan
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTimeSet
</UL>

<P><STRONG><a name="[54]"></a>subDispEndHour</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcdfunc.o(i.subDispEndHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = subDispEndHour &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
</UL>

<P><STRONG><a name="[55]"></a>subDispEndMin</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcdfunc.o(i.subDispEndMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = subDispEndMin &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
</UL>

<P><STRONG><a name="[57]"></a>subDispNowHour</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcdfunc.o(i.subDispNowHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = subDispNowHour &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
</UL>

<P><STRONG><a name="[58]"></a>subDispNowMin</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcdfunc.o(i.subDispNowMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = subDispNowMin &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
</UL>

<P><STRONG><a name="[4d]"></a>subDispRpm</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lcdfunc.o(i.subDispRpm))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = subDispRpm &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispTripFlash
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnSpeed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnGate
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdOutCtrl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeWash
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Invalid
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeSpeed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeShutDown
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeGate
</UL>

<P><STRONG><a name="[52]"></a>subDispStartHour</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcdfunc.o(i.subDispStartHour))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = subDispStartHour &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
</UL>

<P><STRONG><a name="[53]"></a>subDispStartMin</STRONG> (Thumb, 70 bytes, Stack size 8 bytes, lcdfunc.o(i.subDispStartMin))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = subDispStartMin &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_1
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
</UL>

<P><STRONG><a name="[4a]"></a>subDispTrip</STRONG> (Thumb, 534 bytes, Stack size 4 bytes, lcd.o(i.subDispTrip))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = subDispTrip
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdError
</UL>

<P><STRONG><a name="[49]"></a>subDispTripFlash</STRONG> (Thumb, 42 bytes, Stack size 8 bytes, lcd.o(i.subDispTripFlash))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = subDispTripFlash &rArr; subDispRpm &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subDispRpm
</UL>
<BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdError
</UL>

<P><STRONG><a name="[59]"></a>subDispUnit</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lcdfunc.o(i.subDispUnit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = subDispUnit
</UL>
<BR>[Called By]<UL><LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
</UL>

<P><STRONG><a name="[4c]"></a>subDispWt</STRONG> (Thumb, 114 bytes, Stack size 24 bytes, lcdfunc.o(i.subDispWt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DispToItemLo
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnSpeed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnGate
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysUpPowerInit_1
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_1
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdOutCtrl
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeWash
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Invalid
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeSpeed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeShutDown
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeGate
</UL>

<P><STRONG><a name="[130]"></a>subModeUpDown</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, modefunc.o(i.subModeUpDown))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[9e]"></a>subMotorTrip</STRONG> (Thumb, 876 bytes, Stack size 24 bytes, errorfunc.o(i.subMotorTrip))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = subMotorTrip
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeToUpWash
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProRun
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[90]"></a>subRead8563</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc.o(i.subRead8563))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = subRead8563 &rArr; Siic_Recv &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysTest
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysNol
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysInit
</UL>

<P><STRONG><a name="[9b]"></a>subSetMode</STRONG> (Thumb, 1384 bytes, Stack size 24 bytes, mode.o(i.subSetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = subSetMode &rArr; FunLcdModeTime_Run &rArr; FunLcdModeSpeed &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetTimeCtrl
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subClrKeyBit
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subMotorTrip
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subModeUpDown
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subBuzCtrl
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunUpWash_Set
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSuperWash_Set
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSelfStudy_Set
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunReEnterSelfStudy
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunNormalWash_Set
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeToUpWash
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeToSuperWash
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeToNormalWash
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTime_UnitSwitch
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeShutDown
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeRemeber
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeOutCtrl_Din
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeOutCtrl_Analog
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeOutCtrl_485
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_UnitSwitch
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGate_StudyMax
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateUpDown
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdbrightness
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnSpeed
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdWarnGate
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdOutCtrl
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdOther
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeWash
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Stay
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Set
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Run
<LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeTime_Invalid
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeSpeed
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeShutDown
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdModeGate
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdError
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunKeyLockLight
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunErrorRemeber
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSpdToMotor
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetTimeQuery
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SpmTempProtect
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTimeSet
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;AcVoltLmt
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProRun
</UL>

<P><STRONG><a name="[79]"></a>subSetRomUpDown</STRONG> (Thumb, 228 bytes, Stack size 0 bytes, modefunc.o(i.subSetRomUpDown))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeShutDown
</UL>

<P><STRONG><a name="[132]"></a>subSetTimeQuery</STRONG> (Thumb, 64 bytes, Stack size 0 bytes, mode.o(i.subSetTimeQuery))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[9f]"></a>subSpdToMotor</STRONG> (Thumb, 122 bytes, Stack size 4 bytes, mode.o(i.subSpdToMotor))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = subSpdToMotor
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProRun
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[9c]"></a>subTestMode</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, mode.o(i.subTestMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = subTestMode &rArr; FunLcdSysTest_1 &rArr; subDispWt &rArr; DispToItemLo &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subClrKeyBit
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_1
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdSysTest_0
<LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunLcdError
</UL>
<BR>[Called By]<UL><LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProRun
</UL>

<P><STRONG><a name="[8f]"></a>subWrite8563</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, rtc.o(i.subWrite8563))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = subWrite8563 &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Send
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysTest
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysNol
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysInit
</UL>

<P><STRONG><a name="[117]"></a>switch_read</STRONG> (Thumb, 94 bytes, Stack size 24 bytes, ic74hc165.o(i.switch_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = switch_read
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e0]"></a>sys_Countdown</STRONG> (Thumb, 140 bytes, Stack size 24 bytes, main.o(i.sys_Countdown))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = sys_Countdown &rArr; FunAnalog_CycleGet &rArr; Get_average &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunAnalog_CycleGet
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunTimeCtrl
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysTick_Handler
</UL>

<P><STRONG><a name="[137]"></a>take_byte_rxbuff</STRONG> (Thumb, 30 bytes, Stack size 0 bytes, system.o(i.take_byte_rxbuff))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>

<P><STRONG><a name="[e6]"></a>uart485_rx</STRONG> (Thumb, 174 bytes, Stack size 20 bytes, uart485.o(i.uart485_rx))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = uart485_rx &rArr; uart485_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
</UL>

<P><STRONG><a name="[e8]"></a>uart485_rx_onoff</STRONG> (Thumb, 70 bytes, Stack size 12 bytes, uart485.o(i.uart485_rx_onoff))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = uart485_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_tx
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx
<LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_send
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_correction
</UL>

<P><STRONG><a name="[e7]"></a>uart485_tx</STRONG> (Thumb, 144 bytes, Stack size 12 bytes, uart485.o(i.uart485_tx))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = uart485_tx &rArr; uart485_rx_onoff
</UL>
<BR>[Calls]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;uart485_rx_onoff
</UL>
<BR>[Called By]<UL><LI><a href="#[15]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM2_IRQHandler
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_send
</UL>

<P><STRONG><a name="[ef]"></a>uart_receive_input</STRONG> (Thumb, 48 bytes, Stack size 4 bytes, mcu_api.o(i.uart_receive_input))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = uart_receive_input
</UL>
<BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;USART2_IRQHandler
</UL>

<P><STRONG><a name="[70]"></a>wifi_protocol_init</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, mcu_api.o(i.wifi_protocol_init))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[101]"></a>wifi_test_result</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, protocol.o(i.wifi_test_result))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[113]"></a>wifi_uart_service</STRONG> (Thumb, 182 bytes, Stack size 24 bytes, mcu_api.o(i.wifi_uart_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 144<LI>Call Chain = wifi_uart_service &rArr; data_handle &rArr; data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;with_data_rxbuff
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;take_byte_rxbuff
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[fe]"></a>wifi_uart_write_frame</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, system.o(i.wifi_uart_write_frame))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_check_sum
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WIFI_U2_saveData
</UL>
<BR>[Called By]<UL><LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_start_wifitest
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;product_info_update
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;heat_beat_check
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_mcu_wifi_mode
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_set_wifi_mode
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_fault_update
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>

<P><STRONG><a name="[138]"></a>with_data_rxbuff</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, system.o(i.with_data_rxbuff))
<BR><BR>[Called By]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_service
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[e3]"></a>SetSysClock</STRONG> (Thumb, 154 bytes, Stack size 12 bytes, system_stm32f0xx.o(i.SetSysClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SetSysClock
</UL>
<BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[a0]"></a>FunTimeCtrl</STRONG> (Thumb, 698 bytes, Stack size 16 bytes, main.o(i.FunTimeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FunTimeCtrl &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysPropetyTime
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sys_Countdown
</UL>

<P><STRONG><a name="[68]"></a>McuGPIOInit</STRONG> (Thumb, 356 bytes, Stack size 32 bytes, init.o(i.McuGPIOInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = McuGPIOInit &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_PinAFConfig
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_AHBPeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[6a]"></a>McuPPGInit</STRONG> (Thumb, 208 bytes, Stack size 56 bytes, init.o(i.McuPPGInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = McuPPGInit &rArr; TIM_OC2Init
</UL>
<BR>[Calls]<UL><LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseStructInit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_TimeBaseInit
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare2
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OCStructInit
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2PreloadConfig
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC2Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1PreloadConfig
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_OC1Init
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_CtrlPWMOutputs
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_Cmd
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB2PeriphClockCmd
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_APB1PeriphClockCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[6c]"></a>McuRamInit</STRONG> (Thumb, 216 bytes, Stack size 16 bytes, init.o(i.McuRamInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = McuRamInit
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[69]"></a>McuTimeInit</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, init.o(i.McuTimeInit))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[6b]"></a>McuUartInit</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, init.o(i.McuUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = McuUartInit &rArr; suart1_init &rArr; GPIO_Init
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;suart1_init
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Uart485_init
</UL>
<BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMcuInit
</UL>

<P><STRONG><a name="[7c]"></a>suKeyUp_DownSetTime</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, mode.o(i.suKeyUp_DownSetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = suKeyUp_DownSetTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTimeSet
</UL>

<P><STRONG><a name="[99]"></a>subClrKeyBit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, mode.o(i.subClrKeyBit))
<BR><BR>[Called By]<UL><LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunSysProInit
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subTestMode
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[126]"></a>subEndTm</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mode.o(i.subEndTm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = subEndTm
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyUpDownSetTime
</UL>

<P><STRONG><a name="[7b]"></a>subKeyUpDownSetTime</STRONG> (Thumb, 468 bytes, Stack size 24 bytes, mode.o(i.subKeyUpDownSetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = subKeyUpDownSetTime &rArr; __aeabi_idivmod &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subStartTm
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subMinTime
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subEndTm
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateLimit
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeTimeSet
</UL>

<P><STRONG><a name="[124]"></a>subMinTime</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, mode.o(i.subMinTime))
<BR><BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyUpDownSetTime
</UL>

<P><STRONG><a name="[131]"></a>subSetTimeCtrl</STRONG> (Thumb, 400 bytes, Stack size 28 bytes, mode.o(i.subSetTimeCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = subSetTimeCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subSetMode
</UL>

<P><STRONG><a name="[125]"></a>subStartTm</STRONG> (Thumb, 66 bytes, Stack size 16 bytes, mode.o(i.subStartTm))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = subStartTm
</UL>
<BR>[Called By]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subKeyUpDownSetTime
</UL>

<P><STRONG><a name="[77]"></a>subModeSDClearTime</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, modefunc.o(i.subModeSDClearTime))
<BR><BR>[Called By]<UL><LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeShutDown
</UL>

<P><STRONG><a name="[47]"></a>subBuzz</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, key.o(i.subBuzz))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = subBuzz
</UL>
<BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TIM_SetCompare1
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunInOut
</UL>

<P><STRONG><a name="[45]"></a>subDinScan</STRONG> (Thumb, 220 bytes, Stack size 8 bytes, key.o(i.subDinScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = subDinScan
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunInOut
</UL>

<P><STRONG><a name="[46]"></a>subKeyScan</STRONG> (Thumb, 1328 bytes, Stack size 20 bytes, key.o(i.subKeyScan))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = subKeyScan
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subBuzCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunInOut
</UL>

<P><STRONG><a name="[8b]"></a>FunPSensor_GetAD</STRONG> (Thumb, 218 bytes, Stack size 20 bytes, adc.o(i.FunPSensor_GetAD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = FunPSensor_GetAD
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSonser
</UL>

<P><STRONG><a name="[86]"></a>FunPSensor_GetPress</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, adc.o(i.FunPSensor_GetPress))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = FunPSensor_GetPress &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSonser
</UL>

<P><STRONG><a name="[87]"></a>FunPSensor_IsError</STRONG> (Thumb, 236 bytes, Stack size 24 bytes, adc.o(i.FunPSensor_IsError))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = FunPSensor_IsError
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunPSonser
</UL>

<P><STRONG><a name="[8e]"></a>FunRtc_SysInit</STRONG> (Thumb, 230 bytes, Stack size 24 bytes, rtc.o(i.FunRtc_SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FunRtc_SysInit &rArr; subWrite8563 &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWrite8563
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subRead8563
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysPro
</UL>

<P><STRONG><a name="[91]"></a>FunRtc_SysNol</STRONG> (Thumb, 244 bytes, Stack size 24 bytes, rtc.o(i.FunRtc_SysNol))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FunRtc_SysNol &rArr; subWrite8563 &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWrite8563
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subRead8563
<LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BinToBcd_Sub
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BcdToBin_Sub
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysPro
</UL>

<P><STRONG><a name="[94]"></a>FunRtc_SysTest</STRONG> (Thumb, 164 bytes, Stack size 24 bytes, rtc.o(i.FunRtc_SysTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FunRtc_SysTest &rArr; subWrite8563 &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subWrite8563
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;subRead8563
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunRtc_SysPro
</UL>

<P><STRONG><a name="[3b]"></a>FunE2_SysInit</STRONG> (Thumb, 720 bytes, Stack size 24 bytes, e2prom.o(i.FunE2_SysInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FunE2_SysInit &rArr; Read24c02_Sub &rArr; Siic_Recv &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunModeGateLimit
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read24c02_Sub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysPro
</UL>

<P><STRONG><a name="[3f]"></a>FunE2_SysNol</STRONG> (Thumb, 1404 bytes, Stack size 104 bytes, e2prom.o(i.FunE2_SysNol))
<BR><BR>[Stack]<UL><LI>Max Depth = 168<LI>Call Chain = FunE2_SysNol &rArr; Write24c02_Sub &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write24c02_Sub
<LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysPro
</UL>

<P><STRONG><a name="[43]"></a>FunE2_SysTest</STRONG> (Thumb, 276 bytes, Stack size 24 bytes, e2prom.o(i.FunE2_SysTest))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = FunE2_SysTest &rArr; Write24c02_Sub &rArr; Siic_Send &rArr; Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write24c02_Sub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read24c02_Sub
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunE2_SysPro
</UL>

<P><STRONG><a name="[d8]"></a>Siic_Ack</STRONG> (Thumb, 60 bytes, Stack size 8 bytes, siic.o(i.Siic_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Siic_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>

<P><STRONG><a name="[d9]"></a>Siic_Read</STRONG> (Thumb, 82 bytes, Stack size 16 bytes, siic.o(i.Siic_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Siic_Read
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>

<P><STRONG><a name="[db]"></a>Siic_Start</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, siic.o(i.Siic_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Siic_Start
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>

<P><STRONG><a name="[de]"></a>Siic_Stop</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, siic.o(i.Siic_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Siic_Stop
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>

<P><STRONG><a name="[dd]"></a>Siic_Wait_Ack</STRONG> (Thumb, 86 bytes, Stack size 16 bytes, siic.o(i.Siic_Wait_Ack))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Siic_Wait_Ack
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadInputDataBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>

<P><STRONG><a name="[dc]"></a>Siic_Write</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, siic.o(i.Siic_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Siic_Write
</UL>
<BR>[Calls]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_us
</UL>
<BR>[Called By]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Send
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Siic_Recv
</UL>

<P><STRONG><a name="[84]"></a>MotorComCheckSum</STRONG> (Thumb, 30 bytes, Stack size 4 bytes, uart.o(i.MotorComCheckSum))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = MotorComCheckSum
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FunMotorCom
</UL>

<P><STRONG><a name="[104]"></a>dp_download_backwash_time_set_handle</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, protocol.o(i.dp_download_backwash_time_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dp_download_backwash_time_set_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[107]"></a>dp_download_flow_rate_set_handle</STRONG> (Thumb, 150 bytes, Stack size 16 bytes, protocol.o(i.dp_download_flow_rate_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = dp_download_flow_rate_set_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[108]"></a>dp_download_mode_handle</STRONG> (Thumb, 278 bytes, Stack size 24 bytes, protocol.o(i.dp_download_mode_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = dp_download_mode_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[10b]"></a>dp_download_speed_set_handle</STRONG> (Thumb, 86 bytes, Stack size 8 bytes, protocol.o(i.dp_download_speed_set_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dp_download_speed_set_handle &rArr; mcu_dp_value_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_value
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_value_update
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[109]"></a>dp_download_swtich_handle</STRONG> (Thumb, 104 bytes, Stack size 8 bytes, protocol.o(i.dp_download_swtich_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dp_download_swtich_handle &rArr; mcu_dp_bool_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_bool
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_bool_update
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[10a]"></a>dp_download_uint_switch_handle</STRONG> (Thumb, 76 bytes, Stack size 8 bytes, protocol.o(i.dp_download_uint_switch_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = dp_download_uint_switch_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_get_dp_download_enum
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mcu_dp_enum_update
</UL>
<BR>[Called By]<UL><LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>

<P><STRONG><a name="[ff]"></a>data_point_handle</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, system.o(i.data_point_handle))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = data_point_handle &rArr; dp_download_handle &rArr; dp_download_mode_handle &rArr; mcu_dp_enum_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_dowmload_dpid_index
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;dp_download_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[102]"></a>get_dowmload_dpid_index</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, system.o(i.get_dowmload_dpid_index))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = get_dowmload_dpid_index
</UL>
<BR>[Calls]<UL><LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_download_cmd_total
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_point_handle
</UL>

<P><STRONG><a name="[fd]"></a>get_mcu_wifi_mode</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, system.o(i.get_mcu_wifi_mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = get_mcu_wifi_mode &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[fb]"></a>heat_beat_check</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, system.o(i.heat_beat_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = heat_beat_check &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_byte
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>

<P><STRONG><a name="[fc]"></a>product_info_update</STRONG> (Thumb, 140 bytes, Stack size 8 bytes, system.o(i.product_info_update))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = product_info_update &rArr; wifi_uart_write_frame &rArr; WIFI_U2_saveData
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wifi_uart_write_frame
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_wifi_uart_buffer
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;my_strlen
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_handle
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
